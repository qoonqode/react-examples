{"id":"../node_modules/@octokit/rest/lib/constructor.js","dependencies":[{"name":"/Users/trashpanda/Projects/react-examples/github-repos/package.json","includedInParent":true,"mtime":1563048131818},{"name":"/Users/trashpanda/Projects/react-examples/github-repos/.babelrc","includedInParent":true,"mtime":1562940189648},{"name":"/Users/trashpanda/Projects/react-examples/github-repos/node_modules/@octokit/rest/package.json","includedInParent":true,"mtime":1563030517441},{"name":"@octokit/request","loc":{"line":3,"column":28},"parent":"/Users/trashpanda/Projects/react-examples/github-repos/node_modules/@octokit/rest/lib/constructor.js","resolved":"/Users/trashpanda/Projects/react-examples/github-repos/node_modules/@octokit/request/dist-web/index.js"},{"name":"before-after-hook","loc":{"line":4,"column":21},"parent":"/Users/trashpanda/Projects/react-examples/github-repos/node_modules/@octokit/rest/lib/constructor.js","resolved":"/Users/trashpanda/Projects/react-examples/github-repos/node_modules/before-after-hook/index.js"},{"name":"./parse-client-options","loc":{"line":6,"column":35},"parent":"/Users/trashpanda/Projects/react-examples/github-repos/node_modules/@octokit/rest/lib/constructor.js","resolved":"/Users/trashpanda/Projects/react-examples/github-repos/node_modules/@octokit/rest/lib/parse-client-options.js"}],"generated":{"js":"module.exports = Octokit\n\nconst { request } = require('@octokit/request')\nconst Hook = require('before-after-hook')\n\nconst parseClientOptions = require('./parse-client-options')\n\nfunction Octokit (plugins, options) {\n  options = options || {}\n  const hook = new Hook.Collection()\n  const log = Object.assign({\n    'debug': () => {},\n    'info': () => {},\n    'warn': console.warn,\n    'error': console.error\n  }, options && options.log)\n  const api = {\n    hook,\n    log,\n    request: request.defaults(parseClientOptions(options, log, hook))\n  }\n\n  plugins.forEach(pluginFunction => pluginFunction(api, options))\n\n  return api\n}\n"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/@octokit/rest/lib/constructor.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/@octokit/rest/lib/constructor.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/@octokit/rest/lib/constructor.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/@octokit/rest/lib/constructor.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/@octokit/rest/lib/constructor.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/@octokit/rest/lib/constructor.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/@octokit/rest/lib/constructor.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/@octokit/rest/lib/constructor.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/@octokit/rest/lib/constructor.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/@octokit/rest/lib/constructor.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/@octokit/rest/lib/constructor.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/@octokit/rest/lib/constructor.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/@octokit/rest/lib/constructor.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/@octokit/rest/lib/constructor.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/@octokit/rest/lib/constructor.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/@octokit/rest/lib/constructor.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/@octokit/rest/lib/constructor.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/@octokit/rest/lib/constructor.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/@octokit/rest/lib/constructor.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/@octokit/rest/lib/constructor.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/@octokit/rest/lib/constructor.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/@octokit/rest/lib/constructor.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/@octokit/rest/lib/constructor.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/@octokit/rest/lib/constructor.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/@octokit/rest/lib/constructor.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/@octokit/rest/lib/constructor.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/@octokit/rest/lib/constructor.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}}],"sources":{"../node_modules/@octokit/rest/lib/constructor.js":"module.exports = Octokit\n\nconst { request } = require('@octokit/request')\nconst Hook = require('before-after-hook')\n\nconst parseClientOptions = require('./parse-client-options')\n\nfunction Octokit (plugins, options) {\n  options = options || {}\n  const hook = new Hook.Collection()\n  const log = Object.assign({\n    'debug': () => {},\n    'info': () => {},\n    'warn': console.warn,\n    'error': console.error\n  }, options && options.log)\n  const api = {\n    hook,\n    log,\n    request: request.defaults(parseClientOptions(options, log, hook))\n  }\n\n  plugins.forEach(pluginFunction => pluginFunction(api, options))\n\n  return api\n}\n"},"lineCount":27}},"error":null,"hash":"b75ffa9c2213b8b8af90925e33d749d6","cacheData":{"env":{}}}